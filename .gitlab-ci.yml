stages:
  - build
  - deploy

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

# Job build và deploy cho DB
build-deploy-db:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "Đang build image cho DB..."
  script:
    - cd db
    - docker build -t $IMAGE_TAG .
    # Push image lên GitLab Container Registry (nếu sử dụng)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $IMAGE_TAG
  rules:
    - changes:
        - db/**/*

deploy-db:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    # Sử dụng biến môi trường SSH_KEY_DB chứa private key của máy EC2 db
    - echo "$SSH_KEY_DB" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - echo "Triển khai DB lên máy EC2..."
    # Lệnh deploy: ví dụ, pull image mới và chạy container
    - ssh -o StrictHostKeyChecking=no ec2-user@<DB_EC2_IP> "docker pull $IMAGE_TAG && docker stop db_container || true && docker rm db_container || true && docker rmi \$(docker images -q --filter reference='$CI_REGISTRY_IMAGE') || true && docker run -d --name db_container $IMAGE_TAG"
  rules:
    - changes:
        - db/**/*

# Job build và deploy cho Backend
build-deploy-be:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "Đang build image cho Backend..."
  script:
    - cd be
    - docker build -t $IMAGE_TAG .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $IMAGE_TAG
  rules:
    - changes:
        - be/**/*

deploy-be:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_KEY_BE" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - echo "Triển khai Backend lên máy EC2..."
    - ssh -o StrictHostKeyChecking=no ec2-user@<BE_EC2_IP> "docker pull $IMAGE_TAG && docker stop be_container || true && docker rm be_container || true && docker rmi \$(docker images -q --filter reference='$CI_REGISTRY_IMAGE') || true && docker run -d --name be_container -p 8080:8080 $IMAGE_TAG"
  rules:
    - changes:
        - be/**/*

# Job build và deploy cho Frontend
build-deploy-fe:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "Đang build image cho Frontend..."
  script:
    - cd fe
    - docker build -t $IMAGE_TAG .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $IMAGE_TAG
  rules:
    - changes:
        - fe/**/*

deploy-fe:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_KEY_FE" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - echo "Triển khai Frontend lên máy EC2..."
    - ssh -o StrictHostKeyChecking=no ec2-user@<FE_EC2_IP> "docker pull $IMAGE_TAG && docker stop fe_container || true && docker rm fe_container || true && docker rmi \$(docker images -q --filter reference='$CI_REGISTRY_IMAGE') || true && docker run -d --name fe_container -p 80:80 $IMAGE_TAG"
  rules:
    - changes:
        - fe/**/*
